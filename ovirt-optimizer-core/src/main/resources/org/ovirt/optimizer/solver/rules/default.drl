package org.ovirt.optimizer.solver;
dialect  "java"

import java.util.ArrayList;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.ovirt.optimizer.solver.problemspace.Migration;
import org.ovirt.engine.sdk.entities.Host;
import org.ovirt.engine.sdk.entities.VM;
import org.ovirt.engine.sdk.entities.Network;
import org.ovirt.engine.sdk.entities.Property;
import org.ovirt.optimizer.optaplanner.RuleLogger;

import org.ovirt.optimizer.solver.facts.RunningVm;
import org.ovirt.optimizer.solver.facts.PolicyUnitEnabled;
import org.ovirt.optimizer.solver.facts.PolicyUnit;
import org.ovirt.optimizer.solver.facts.PolicyProperty;
import org.ovirt.optimizer.solver.facts.VmStats;
import org.ovirt.optimizer.solver.facts.HostStats;
import org.ovirt.optimizer.solver.facts.HostInfo;
import org.ovirt.optimizer.solver.facts.VmAffinityGroup;
import org.ovirt.optimizer.solver.facts.VmInfo;

global HardSoftScoreHolder scoreHolder;

/*
Here are two templates for hard and soft constraint rules. Use them as the base for writing new
rules.

Make sure you use "id" property of all structures when checking for presence, match or membership
as the data source does sometimes return the same object as two different instances (with the same id).

Hard score checks the situation after each active migration step + the final situation. If you
want to check the actual migration itself (pinToHost check) remove the finalStep == true option.

rule "hardScoreTemplate"
    when
        exists PolicyUnitEnabled(uuid == "xxx-xxx")
        // Remove the destination var if the move can violate hard constraints on the source host
        $step: Migration(valid == true || finalStep == true, $destination: destination)
        $host: Host($memory: memory, $step.finalStep == true || id == $destination.id)
        $requiredMemoryTotal : Number(intValue > $memory) from accumulate(
                $vm : VM($vmId : id,
                         $step.getAssignment($vmId) == $host.id,
                         $requiredMemory : memoryPolicy.guaranteed)
                  and exists RunningVm(id == $vmId),
                sum($requiredMemory)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $memory.intValue() - $requiredMemoryTotal.intValue());
end

rule "softScoreTemplate"
    when
        PolicyUnitEnabled(uuid == "xxx-xxx", $factor : factor)
        $finalStep: Migration(finalStep == true)
        $host: Host($memory: memory)
        $requiredMemoryTotal : Number(intValue > $memory) from accumulate(
                $vm : VM($vmId : id,
                         $finalStep.getAssignment($vmId) == $host.id,
                         $requiredMemory : memoryPolicy.guaranteed)
                 and exists RunningVm(id == $vmId),
                sum($requiredMemory)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $factor * ($memory.intValue() - $requiredMemoryTotal.intValue()));
end
*/

// MemoryPolicyUnit
// Check whether host has enough memory to hold just the guaranteed
// memory for all the VMs
// TODO until REST is updated remove 256 MB from hosts memory as reserved, 65 MB as extra reserved
//      and consider 65 MB as per guest overhead
rule "notEnoughGuaranteedMemory"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.MEMORY_FILTER.uuid)
        $step: Migration(valid == true || finalStep == true, $destination : destination)
        $host: Host($step.finalStep == true || id == $destination.id, $memory: memory - 256 - 65)
        $requiredMemoryTotal : Number(longValue > $memory) from accumulate(
                VM($vmId : id,
                         $step.getAssignment($vmId) == $host.id,
                         $requiredMemory : memoryPolicy.guaranteed + 65)
                     and exists RunningVm(id == $vmId),
                sum($requiredMemory)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, (int)(($memory - $requiredMemoryTotal.longValue()) / (1024*1024)));
end

// Check whether the host has enough memory to hold all the VMs while
// taking overcommitment into account
// TODO until REST is updated remove 256 MB from hosts memory as reserved, 65 MB as extra reserved
//      and consider 65 MB as per guest overhead
rule "notEnoughMemory"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.MEMORY_FILTER.uuid)
        $step: Migration(valid == true || finalStep == true, $destination : destination)
        $host: Host($step.finalStep == true || id == $destination.id,
                    $memory: ((memory - 256 - 65) * 100 + (memory - 256 - 65) * (cluster.memoryPolicy.overCommit.percent - 100)) / 100)
        $requiredMemoryTotal : Number(longValue > $memory) from accumulate(
                VM($vmId : id,
                         $step.getAssignment($vmId) == $host.id,
                         $requiredMemory : memory + 65)
                    and exists RunningVm(id == $vmId),
                sum($requiredMemory)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, (int)(($memory - $requiredMemoryTotal.intValue()) / (1024*1024)));
end

// CpuLevelFilterPolicyUnit

/* Compare the number of cores */
rule "notEnoughCores"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.CPU_FILTER.uuid)
        $step: Migration(valid == true || finalStep == true, $destination: destination)
        Host( $id : id, $step.finalStep == true || id == $destination.id )
        HostInfo(id == $id, $cores : totalCores)
        VM($vmId : id, $step.getAssignment($vmId) == $id)
        VmInfo(id == $vmId, $requiredCores : totalCores, $requiredCores > $cores)
        exists RunningVm(id == $vmId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cores - $requiredCores);
end


// org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit
// org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionWeightPolicyUnit
// TODO consider each pair of hosts only once?
rule "evenDistributionCpu"
    when
        PolicyUnitEnabled(uuid == PolicyUnit.EVEN_DIST_WEIGHT.uuid || == PolicyUnit.NONE_WEIGHT.uuid, $factor : factor)
        $finalStep : Migration(finalStep == true)
        Host( $id1 : id )
        HostInfo(id == $id1, $cores1 : totalCores)
        Host( $id2 : id , $id1 != $id2)
        HostInfo(id == $id2, $cores2 : totalCores)
        $cpuTotal1 : Number() from accumulate(
             VM($vmId1 : id,
                $finalStep.getAssignment($vmId1) == $id1)
              and VmInfo(id == $vmId1, $vmCores : totalCores)
              and VmStats(id == $vmId1, $cpu : cpuCurrentTotal)
              and exists RunningVm(id == $vmId1),
             sum($cpu * $vmCores)
        )
        $cpuTotal2 : Number() from accumulate(
             VM($vmId2 : id,
                $finalStep.getAssignment($vmId2) == $id2)
              and VmInfo(id == $vmId2, $vmCores : totalCores)
              and VmStats(id == $vmId2, $cpu : cpuCurrentTotal)
              and exists RunningVm(id == $vmId2),
             sum($cpu * $vmCores)
        )
    then
        float hostUtil1 = $cpuTotal1.floatValue() / $cores1.floatValue();
        float hostUtil2 = $cpuTotal2.floatValue() / $cores2.floatValue();
        scoreHolder.addSoftConstraintMatch(kcontext, (int)(-(Math.abs( hostUtil1 - hostUtil2 )) * $factor ));
end

rule "evenDistributionMemory"
   when
       PolicyUnitEnabled(uuid == PolicyUnit.EVEN_DIST_WEIGHT.uuid || == PolicyUnit.NONE_WEIGHT.uuid, $factor : factor)
       $finalStep: Migration(finalStep == true)
       Host($id1 : id, $mem1 : memory)
       Host($id2 : id, $id1 != $id2, $mem2 : memory)
       $requiredMemoryTotal1 : Number() from accumulate(
               VM($vmId1 : id,
                  $finalStep.getAssignment($vmId1) == $id1,
                  $requiredMemory : memoryPolicy.guaranteed)
                and exists RunningVm(id == $vmId1),
               sum($requiredMemory)
       )
       $requiredMemoryTotal2 : Number() from accumulate(
               VM($vmId2 : id,
                  $finalStep.getAssignment($vmId2) == $id2,
                  $requiredMemory2 : memoryPolicy.guaranteed)
               and exists RunningVm(id == $vmId2),
               sum($requiredMemory2)
       )
   then
       //RuleLogger.info(kcontext, "Host1: {} mem {} vs. Host2: {} mem {} score {}", $id1, $requiredMemoryTotal1.longValue(), $id2, $requiredMemoryTotal2.longValue(), (int)(-Math.abs($requiredMemoryTotal1.longValue() - $requiredMemoryTotal2.longValue())/(1024*1024)));
       float memUtil1 = $requiredMemoryTotal1.floatValue() / $mem1;
       float memUtil2 = $requiredMemoryTotal2.floatValue() / $mem2;
       scoreHolder.addSoftConstraintMatch(kcontext, $factor * (int)( -100.0f * Math.abs(memUtil1 - memUtil2)));
end


rule "cpuHighUtilization"
    when
        PolicyUnitEnabled(uuid == PolicyUnit.EVEN_DIST_WEIGHT.uuid || == PolicyUnit.NONE_WEIGHT.uuid ||
            == PolicyUnit.POWER_SAVING_WEIGHT.uuid, $factor : factor)
        Property( name == PolicyProperty.HIGH_UTIL.getName(), $highUtilThreshold : Float.parseFloat(value) )
        $finalStep: Migration(finalStep == true)
        Host($id : id)
        HostInfo(id == $id, $cores : totalCores != null)
        Number ( (floatValue / $cores) > $highUtilThreshold ) from accumulate(
             VM($vmId : id,  $finalStep.getAssignment($vmId) == $id)
             and VmInfo(id == $vmId, $vmCores : totalCores != null)
             and VmStats(id == $vmId, $vmCpu : cpuCurrentTotal != null)
             and exists RunningVm(id == $vmId),
             sum($vmCpu * $vmCores)
        )
    then
        // using large constant
        scoreHolder.addSoftConstraintMatch(kcontext, -100000 * $factor);
end


rule "memoryHighUtilization"
    when
        PolicyUnitEnabled(uuid == PolicyUnit.EVEN_DIST_WEIGHT.uuid || == PolicyUnit.NONE_WEIGHT.uuid ||
            == PolicyUnit.POWER_SAVING_WEIGHT.uuid, $factor : factor)
        Property( name == PolicyProperty.MAX_FREE_MEM_OVER_UTIL.getName(), $maxFreeMem : Long.parseLong(value) )
        $finalStep: Migration(finalStep == true)
        Host($id : id, $hostMem : memory)
        Number ( longValue > ($hostMem - $maxFreeMem) ) from accumulate(
             VM($vmId : id,  $finalStep.getAssignment($vmId) == $id, $vmMem : memoryPolicy.guaranteed)
             and VmInfo(id == $vmId)
             and exists RunningVm(id == $vmId),
             sum($vmMem)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100000 * $factor);
end


// org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineHAClusterFilterPolicyUnit
rule "hostedEngineClusterFilter"
  when
      exists PolicyUnitEnabled(uuid == PolicyUnit.HOSTED_ENGINE_FILTER.uuid)
      $step: Migration(destination != null && vm != null || finalStep == true, $destination: destination)
      $host: Host($step.finalStep == true || id == $destination.id,
                  hostedEngine == null || hostedEngine.score == 0)
      $vm: VM($vmId : id, origin == "hostedEngine",
          $step.getAssignment($vmId) == $host.id)
      RunningVm(id == $vmId)
  then
      scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// HostedEngineHAClusterWeightPolicyUnit
// Penalize all hosted_engine migrations to host with non-maximum
// score
rule "hostedEngineClusterWeight"
  when
      exists PolicyUnitEnabled(uuid == PolicyUnit.HOSTED_ENGINE_WEIGHT.uuid)
      $step: Migration(finalStep == true)
      $host: Host(hostedEngine != null, $dScore: hostedEngine.score)
      $vm: VM($vmId : id, origin == "hostedEngine",
          $step.getAssignment($vmId) == $host.id)
      RunningVm(id == $vmId)

      // Find best HE host score
      $best: Number(intValue > 0) from accumulate (
          $h: Host(hostedEngine != null, $cand: hostedEngine.score),
          max($cand)
      )
  then
      scoreHolder.addSoftConstraintMatch(kcontext, - ($best.intValue() - $dScore));
end


// TODO NetworkPolicyUnit
rule "checkRequiredDisplayNetworks"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.NETWORK_FILTER.uuid)
        $step: Migration(valid == true || finalStep == true, $destination: destination)
        $host: Host($step.finalStep == true || id == $destination.id)
        $vm: VM($vmId : id,
           $step.getAssignment($vmId) == $host.id)
        RunningVm(id == $vmId)
        ArrayList(size == 0) from collect(
           Network(dataCenter.id == $host.cluster.dataCenter.id,
                   display == true)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);

end

// PinToHostPolicyUnit - only check migrations, ignore starts
rule "pinToHostMigration"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.PIN_TO_HOST_FILTER.uuid)
        $step: Migration(valid == true, start == false, $vm: vm, $destination: destination)
        VM(id == $vm.id,
           placementPolicy.affinity != "migratable")
        RunningVm(id == $vm.id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// PinToHostPolicyUnit - only check placement for start actions
rule "pinToHostStart"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.PIN_TO_HOST_FILTER.uuid)
        $step: Migration(valid == true, start == true, $vm: vm, $destination: destination)
        $host: Host(id == $destination.id)
        VM(id == $vm.id,
           placementPolicy.host != null,
           placementPolicy.host.id != $host.id)
        RunningVm(id == $vm.id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Additional rules

// Ensure all VMs are assigned as soon as possible
rule "ensureVmRunning"
    when
        $step: Migration(finalStep == true)
        $vm: VM($vmId : id,
                $step.getAssignment($vmId) == null)
        RunningVm(id == $vmId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10000);
end

// Ensure DOWN VMs are not started without request
rule "ensureVmNotRunning"
    when
        $step: Migration(finalStep == true)
        $vm: VM($vmId : id,
                $step.getAssignment($vmId) != null)
        not(exists RunningVm(id == $vmId))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10000);
end

rule "ensureVmRunningEarly"
    when
        $step: Migration(valid == true)
        $vm: VM($vmId : id,
                $step.getAssignment($vmId) == null)
        RunningVm(id == $vmId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

// Test rules

// This rule slightly prioritizes solutions with less migrations
// it should be the tie breaker when more good solutions are available
rule "migrationSteps"
    when
        Migration(valid == true)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/* Debug rule
rule "migrationStepsAvailable"
    when
        Migration()
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1);
end

rule "vmsAvailable"
    when
        $finalStep: Migration(finalStep == true)
        VM($vm: id)
        Host($host: id,
             $finalStep.getAssignment($vm) == $host)
        RunningVm(id == $vmId)
    then
        RuleLogger.info(kcontext, "VM {} runs at host {}", $vm, $host);
        scoreHolder.addSoftConstraintMatch(kcontext, 1);
end */



// OptimalForPowerSaving unit
// reduces the soft score by 1 when a non-empty host is encountered
rule "consolidateVMs"
   when
       PolicyUnitEnabled(uuid == PolicyUnit.POWER_SAVING_WEIGHT.uuid, $factor : factor)
       $finalStep: Migration(finalStep == true)
       Host($id1 : id)
       exists (
           VM( $vmId : id,
               $finalStep.getAssignment($vmId) == $id1) and
           RunningVm(id == $vmId)
       )
   then
       scoreHolder.addSoftConstraintMatch(kcontext, -1000 * $factor);
end

// OptimalForEvenGuestDistribution
rule "balancedVmCount"
   when
       PolicyUnitEnabled(uuid == PolicyUnit.EVEN_GUEST_DIST_WEIGHT.uuid, $factor: factor)
       Property(name == PolicyProperty.MIGRATION_THRESHOLD.getName, $migrationThreshold : value)
       $finalStep: Migration(finalStep == true)
       Host($id1 : id)
       Host($id2 : id, $id1 != $id2)
       $vmCount1 : Number() from accumulate(
               VM($vmId1 : id,
                  $finalStep.getAssignment($vmId1) == $id1)
               and exists RunningVm(id == $vmId1),
               sum(1)
       )
       $vmCount2 : Number(Math.abs(intValue - $vmCount1.intValue()) > $migrationThreshold) from accumulate(
               VM($vmId2 : id,
                  $finalStep.getAssignment($vmId2) == $id2)
               and exists RunningVm(id == $vmId2),
               sum(1)
       )
   then
       scoreHolder.addSoftConstraintMatch(kcontext, -1 * $factor * Math.abs($vmCount1.intValue() - $vmCount2.intValue()));
end

rule "vmAffinityEnforcingPositive"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.VM_AFFINITY_FILTER.uuid)
        VmAffinityGroup(positive == true, enforcing == true, $vmIds : vmIds)
        $step : Migration(valid == true || finalStep == true)
        VM( $id1 : id, id memberOf $vmIds )
        VM( $id2 : id, id memberOf $vmIds, id != $id1,
            $step.getAssignment($id1) != $step.getAssignment($id2))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "vmAffinityEnforcingNegative"
    when
        exists PolicyUnitEnabled(uuid == PolicyUnit.VM_AFFINITY_FILTER.uuid)
        VmAffinityGroup(positive == false, enforcing == true, $vmIds : vmIds)
        $step : Migration(valid == true || finalStep == true)
        VM( $id1 : id, id memberOf $vmIds )
        VM( $id2 : id, id memberOf $vmIds, id != $id1,
            $step.getAssignment($id1) == $step.getAssignment($id2))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end


rule "vmAffinityNotEnforcingPositive"
    when
        PolicyUnitEnabled(uuid == PolicyUnit.VM_AFFINITY_WEIGHT.uuid, $factor : factor)
        VmAffinityGroup(positive == true, enforcing == false, $vmIds : vmIds)
        $step : Migration(finalStep == true)
        VM( $id1 : id, id memberOf $vmIds )
        VM( $id2 : id, id memberOf $vmIds, id != $id1,
            $step.getAssignment($id1) != $step.getAssignment($id2))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100 * $factor);
end


rule "vmAffinityNotEnforcingNegative"
    when
        PolicyUnitEnabled(uuid == PolicyUnit.VM_AFFINITY_WEIGHT.uuid, $factor : factor)
        VmAffinityGroup(positive == false, enforcing == false, $vmIds : vmIds)
        $step : Migration(finalStep == true)
        VM( $id1 : id, id memberOf $vmIds )
        VM( $id2 : id, id memberOf $vmIds, id != $id1,
            $step.getAssignment($id1) == $step.getAssignment($id2))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100 * $factor);
end
